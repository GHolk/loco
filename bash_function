#!/bin/bash

## chain command
mcd() { 
    mkdir $@
    cd $1
}

cls() {
    cd $1
    ls
}

err() {
    echo "$@" >&2
}

gvfs() {
    gvfs-$*
}

## change and execute command
big5() {
    luit -encoding big5 "$@"
}
value() {
    local exit_state
    case "$1" in
        -q )
            shift
            quiet "$@"
            ;;
        -Q )
            shift
            quiet -Q "$@"
            ;;
        * )
            "$@"
            ;;
    esac
    exit_state=$?
    echo $exit_state
    return $exit_state
}
quiet() {
    if [ "$1" = -Q ]
    then
        shift
        "$@" >/dev/null 2>&1
    else
        "$@" >/dev/null
    fi
}
as_return() {
    return $(($1 == 0))
}
set_if_empty() {
    local name value
    name=$1
    value="$2"
    if eval [ -z \"\$$name\" ]
    then
        eval $name='"$value"'
        return 0
    else
        return 1
    fi
}

cutdf() {
    delimeter="$1"
    field="$2"
    shift
    shift
    cut -d "$delimeter" -f "$field" "$@"
}

acd() {
    if ! mount | grep -q avfs
    then mountavfs
    fi

    local target="$1"
    if [ -d "$target#" ]
    then cd "$target#"
    else
        case "$target" in
            /*) cd "$HOME/.avfs$target#" ;;
            *) cd "$HOME/.avfs$PWD/$target#" ;;
        esac
    fi
}


# fc for script file
fx() {
    local command=$1
    history -s fx $command

    temp_script=$(mktemp /tmp/fx.XXXXXXXX.tmp)

    if [ -f "$command" ]
    then
        sed -e '1i(' -e '$a)' $command > $temp_script
    else
        case `type -t $command` in
            file)
                sed -e '1i(' -e '$a)' `type -P $command` > $temp_script
                ;;
            "function")
                declare -f $command > $temp_script
                ;;
            "alias")
                alias $command > $temp_script
                ;;
            *)
                err not editing support command type: `type -t $command`
                return 1
        esac
    fi
    $EDITOR $temp_script
    history -s "$(cat $temp_script)"
    . $temp_script
    rm $temp_script
}
