<!-- BBS2HTML[877079784] Areicle by wcf@CCCA.NCTU.edu.tw  -->

            ◇ VT100、ANSI 碼說明
發信人: LccWizard@cis_nctu (CView), 信區: programming
標  題: Re: 來自 hcyang@cse.ogi.edu
發信站: 交大資科_BBS (Sat Nov  2 07:45:22 1996)
來  源: 168.95.127.245

> >         call my  bbs 02-601-1684 , there are a few tech doucment about
> >         program on my bbs
> Would you please post the tech documents about VT100, ANSI terminal
> control commands on any bbs of Taiwan's universities ?
> You know, this e-mail is from U.S., it is quite impossible for me
> to make an international phone-call back to Taiwan.

        以下是vt100, ansi 的指令說明!
 ANSI Standard (X3.64) Control Sequences for Video Terminals and Peripherals
                       in alphabetic order by mnemonic

     (Inspired by the article "Toward Standardized Video Terminals: ANSI
      X3.64 Device Control" by Mark L. Siegel, April 1984 BYTE, page 365)

                Note: This describes the VT-100 standard.

               (Ps and Pn are parameters expressed in ASCII.)
               (Numeric parameters are given in decimal radix.)
               (Abbreviations are explained in detail at end.)
               (Spaces used in this table for clarity are not
                used in the actual codes.)

                                                           Default    Type
Sequence     Sequence                                      Parameter   or
Mnemonic     Name              Sequence                    Value      Mode
---------------------------------------------------------------------------
APC  Applicatn Program Command Esc Fe                                 Delim
CBT  Cursor Backward Tab       Esc [ Pn Z                   1         EdF
CCH  Cancel Previous Character Esc T
CHA  Cursor Horzntal Absolute  Esc [ Pn G                   1         EdF
CHT  Cursor Horizontal Tab     Esc [ Pn I                   1         EdF
CNL  Cursor Next Line          Esc [ Pn E                   1         EdF
CPL  Cursor Preceding Line     Esc [ Pn F                   1         EdF
CPR  Cursor Position Report    Esc [ Pn ; Pn R              1, 1
CSI  Control Sequence Intro    Esc [                                  Intro
CTC  Cursor Tab Control        Esc [ Ps W                   0         EdF
CUB  Cursor Backward           Esc [ Pn D                   1         EdF
CUD  Cursor Down               Esc [ Pn B                   1         EdF
CUF  Cursor Forward            Esc [ Pn C                   1         EdF
CUP  Cursor Position           Esc [ Pn ; Pn H              1, 1      EdF
CUU  Cursor Up                 Esc [ Pn A                   1         EdF
CVT  Cursor Vertical Tab       Esc [ Pn Y                             EdF
DA   Device Attributes         Esc [ Pn c                   0
DAQ  Define Area Qualification Esc [ Ps o                   0
DCH  Delete Character          Esc [ Pn P                   1         EdF
DCS  Device Control String     Esc P                                  Delim
DL   Delete Line               Esc [ Pn M                   1         EdF
DMI  Disable Manual Input      Esc \                                  Fs
DSR  Device Status Report      Esc [ Ps n                   0
EA   Erase in Area             Esc [ Ps O                   0         EdF
ECH  Erase Character           Esc [ Pn X                   1         EdF
ED   Erase in Display          Esc [ Ps J                   0         EdF
EF   Erase in Field            Esc [ Ps N                   0         EdF
EL   Erase in Line             Esc [ Ps K                   0         EdF
EMI  Enable Manual Input       Esc b                                  Fs
EPA  End of Protected Area     Esc W
ESA  End of Selected Area      Esc G
FNT  Font Selection            Esc [ Pn ; Pn Space D        0, 0      FE
GSM  Graphic Size Modify       Esc [ Pn ; Pn Space B        100, 100  FE
GSS  Graphic Size Selection    Esc [ Pn Space C             none      FE
HPA  Horz Position Absolute    Esc [ Pn `                   1         FE
HPR  Horz Position Relative    Esc [ Pn a                   1         FE
HTJ  Horz Tab w/Justification  Esc I                                  FE
HTS  Horizontal Tab Set        Esc H                                  FE
HVP  Horz & Vertical Position  Esc [ Pn ; Pn f              1, 1      FE
ICH  Insert Character          Esc [ Pn @                   1         EdF
IL   Insert Line               Esc [ Pn L                   1         EdF
IND  Index                     Esc D                                  FE
INT  Interrupt                 Esc a                                  Fs
JFY  Justify                   Esc [ Ps ; ... ; Ps Space F  0         FE
MC   Media Copy                Esc [ Ps i                   0
MW   Message Waiting           Esc U
NEL  Next Line                 Esc E                                  FE
NP   Next Page                 Esc [ Pn U                   1         EdF
OSC  Operating System Command  Esc ]                                  Delim
PLD  Partial Line Down         Esc K                                  FE
PLU  Partial Line Up           Esc L                                  FE
PM   Privacy Message           Esc ^                                  Delim
PP   Preceding Page            Esc [ Pn V                   1         EdF
PU1  Private Use 1             Esc Q
PU2  Private Use 2             Esc R
QUAD Typographic Quadding      Esc [ Ps Space H             0         FE
REP  Repeat Char or Control    Esc [ Pn b                   1
RI   Reverse Index             Esc M                                  FE
RIS  Reset to Initial State    Esc c                                  Fs
RM   Reset Mode                Esc [ Ps l                   none
SD   Scroll Down               Esc [ Pn T                   1         EdF
SEM  Select Edit Extent Mode   Esc [ Ps Q                   0
SGR  Select Graphic Rendition  Esc [ Ps m                   0         FE
SL   Scroll Left               Esc [ Pn Space @             1         EdF
SM   Select Mode               Esc [ Ps h                   none
SPA  Start of Protected Area   Esc V
SPI  Spacing Increment         Esc [ Pn ; Pn Space G        none      FE
SR   Scroll Right              Esc [ Pn Space A             1         EdF
SS2  Single Shift 2 (G2 set)   Esc N                                  Intro
SS3  Single Shift 3 (G3 set)   Esc O                                  Intro
SSA  Start of Selected Area    Esc F
ST   String Terminator         Esc \                                  Delim
STS  Set Transmit State        Esc S
SU   Scroll Up                 Esc [ Pn S                   1         EdF
TBC  Tab Clear                 Esc [ Ps g                   0         FE
TSS  Thin Space Specification  Esc [ Pn Space E             none      FE
VPA  Vert Position Absolute    Esc [ Pn d                   1         FE
VPR  Vert Position Relative    Esc [ Pn e                   1         FE
VTS  Vertical Tabulation Set   Esc J                                  FE

 ---------------------------------------------------------------------------

Abbreviations:

Intro  an Introducer of some kind of defined sequence; the normal 7-bit
       X3.64 Control Sequence Introducer is the two characters "Escape ["

Delim  a Delimiter

x/y    identifies a character by position in the ASCII table (column/row)

EdF    editor function (see explanation)

FE     format effector (see explanation)

F      is a Final character in
            an Escape sequence (F from 3/0 to 7/14 in the ASCII table)
            a control sequence (F from 4/0 to 7/14)

Gs     is a graphic character appearing in strings (Gs ranges from
       2/0 to 7/14) in the ASCII table

Ce     is a control represented as a single bit combination in the C1 set
       of controls in an 8-bit character set

C0     the familiar set of 7-bit ASCII control characters

C1     roughly, the set of control characters available only in 8-bit systems.
       This is too complicated to explain fully here, so read Jim Fleming's
       article in the February 1983 BYTE, especially pages 214 through 224.

Fe     is a Final character of a 2-character Escape sequence that has an
       equivalent representation in an 8-bit environment as a Ce-type
       (Fe ranges from 4/0 to 5/15)

Fs     is a Final character of a 2-character Escape sequence that is
       standardized internationally with identical representation in 7-bit
       and 8-bit environments and is independent of the currently
       designated C0 and C1 control sets (Fs ranges from 6/0 to 7/14)

I      is an Intermediate character from 2/0 to 2/15 (inclusive) in the
       ASCII table

P      is a parameter character from 3/0 to 3/15 (inclusive) in the ASCII
       table

Pn     is a numeric parameter in a control sequence, a string of zero or
       more characters ranging from 3/0 to 3/9 in the ASCII table

Ps     is a variable number of selective parameters in a control sequence
       with each selective parameter separated from the other by the code
       3/11 (which usually represents a semicolon); Ps ranges from
       3/0 to 3/9 and includes 3/11

v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v
v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v

Format Effectors versus Editor Functions

A format effector specifies how the final output is to be created.
An editor function allows you to modify the specification.

For instance, a format effector that moves the "active position" (the
cursor or equivalent) one space to the left would be useful when you want to
create an over strike, a compound character made of two standard characters
overlaid. Control-H, the Backspace character, is actually supposed to be a
format effector, so you can do this. But many systems use it in a
nonstandard fashion, as an editor function, deleting the character to the
left of the cursor and moving the cursor left. When Control-H is assumed to
be an editor function, you cannot predict whether its use will create an
over strike unless you also know whether the output device is in an "insert
mode" or an "overwrite mode". When Control-H is used as a format effector,
its effect can always be predicted. The familiar characters carriage
return, linefeed, formfeed, etc., are defined as format effectors.

v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v
^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^

ANSI X3.64 Mode-Changing Parameters for use with the
           Select Mode (SM) and Reset Mode (RM) functions

    Parameter           Mode          Mode Function
    Characters          Mnemonic
 column/    graphic
  row       repres.
 ----------------------------------------------------------------------------
3/0           0                       an error condition
3/1           1          GATM         guarded-area transfer mode
3/2           2          KAM          keyboard action mode
3/3           3          CRM          control representation mode
3/4           4          IRM          insertion/replacement mode
3/5           5          SRTM         status-reporting transfer mode
3/6           6          ERM          erasure mode
3/7           7          VEM          vertical editing mode
3/8           8                       reserved for future standardization
3/9           9                       reserved for future standardization
3/10          :                       reserved separator for parameters
3/11          ;                       Standard separator for parameters
3/12          <                       reserved for private (experimental) use
3/13          =                       reserved for private (experimental) use
3/14          >                       reserved for private (experimental) use
3/15          ?                       reserved for private (experimental) use
3/1  3/0      10         HEM          horizontal editing mode
3/1  3/1      11         PUM          positioning unit mode
3/1  3/2      12         SRM          send/receive mode
3/1  3/3      13         FEAM         format effector action mode
3/1  3/4      14         FETM         format effector transfer mode
3/1  3/5      15         MATM         multiple area transfer mode
3/1  3/6      16         TTM          transfer termination mode
3/1  3/7      17         SATM         selected area transfer mode
3/1  3/8      18         TSM          tabulation stop mode
3/1  3/9      19         EBM          editing boundary mode
3/1  3/10     1:                      reserved separator for parameters
3/1  3/11     1;                      Standard separator for parameters
3/1  3/12     1<                      error condition--unspecified recovery
3/1  3/13     1=                      error condition--unspecified recovery
3/1  3/14     1>                      error condition--unspecified recovery
3/1  3/15     1?                      error condition--unspecified recovery
3/2  3/0      20         LNM          linefeed/newline mode (not in ISO 6429)
3/2  3/1      21
 .            .
 .            .                       reserved for future standardization
 .            .
3/9  3/9      99

3/12 3/0      <0
 .            .
 .            .                       reserved for private (experimental) use
 .            .
3/15 3/15     ??

v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v
^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^

NOTES ON THE DEC VT100 IMPLEMENTATION

In the case of the popular DEC VT100 video-terminal implementation,
the only mode that may be altered is the linefeed/newline (LNM) mode.
Other modes are considered permanently set, reset, or not applicable
as follows:

     Set:   ERM
     Reset: CRM, EBM, FEAM, FETM, IRM, KAM, PUM, SRTM, TSM
     N/A:   GATM, HEM, MATM, SATM, TTM, VEM

Control sequences implemented in the VT100 are as follows:

     CPR, CUB, CUD, CUF, CUP, CUU, DA, DSR, ED, EL, HTS, HVP, IND,
     LNM, NEL, RI, RIS, RM, SGR, SM, TBC

plus several private DEC commands.

Erasing parts of the display (EL and ED) in the VT100 is performed thus:

     Erase from cursor to end of line           Esc [ 0 K    or Esc [ K
     Erase from beginning of line to cursor     Esc [ 1 K
     Erase line containing cursor               Esc [ 2 K
     Erase from cursor to end of screen         Esc [ 0 J    or Esc [ J
     Erase from beginning of screen to cursor   Esc [ 1 J
     Erase entire screen                        Esc [ 2 J

The VT100 responds to receiving the DA (Device Attributes) control

     Esc [ c    (or Esc [ 0 c)

by transmitting the sequence

     Esc [ ? l ; Ps c

where Ps is a character that describes installed options.

The VT100's cursor location can be read with the DSR (Device Status
Report) control

     Esc [ 6 n

The VT100 reports by transmitting the CPR sequence

     Esc [ Pl ; Pc R

where Pl is the line number and Pc is the column number (in decimal).

v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v
^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^v^

The complete document describing the standard,  "ANSI X3.64-1979:
Additional Controls for Use with the American National Standard
Code for Information Interchange," can be ordered for $13.50 (plus
$4 postage) from

     Standards Sales Department
     American National Standards Institute
     1430 Broadway
     New York, NY 10018
     212/354-3300

It's best to read the full standard before using it. It also helps
to have copies of the related standards "X3.4-1977: American
National Standard Code for Information Interchange" (the ASCII
standard) and "X3.41.1974: Code-Extension Techniques for Use with
the 7-Bit Coded Character Set of American National Standard for
Information Interchange."

See also the chapter "Using Extended Screens and Keyboard Control"
in the IBM PC-DOS manuals (versions 2.0, 2.1, and 3.0), especially
for the coding for character attributes.

The specification for the DEC VT100 is document EK-VT100-UG-003,
available for $13.00 prepaid from:

     Digital Equipment Corporation
     Accessories and Supplies Group
     POB CS-2008
     Nashua, NH 03061

(Copyright 1984 BYTE Publications, subsidiary of McGraw-Hill Inc.)
(Permission granted to reproduce for noncommercial uses.)
(This file prepared by Richard S. Shuford.)

<hr>                            michael regoli
                   indiana university, bloomington
                  UUCP: ...ihnp4!iuvax!silver!regoli
                    regoli@silver.bacs.indiana.edu

⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙

i.資料來源 M 無法考證
a.原發件人 M 無法考證
g.主要標題 M 使用ＡＮＳＩ命令來控制螢幕

⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙⊙

-------------------------------------------------------------------------
     使　用　ＡＮＳＩ　命　令　來  控  制  螢  幕
-------------------------------------------------------------------------
認 識 ＡＮＳＩ．．．．．

   ANSI.SYS 是 一 種 被 稱 為  " 可 以 安 裝 的 驅 動 程 式 "
在 任 何 系 統 下 均 可 用 來 控 制 螢 幕.在 程 式 中 使 用
ANSI.SYS 連 續 命 令 所 產 生 的 輸 出,就 如 同 在 任 何 系 統 之
下 實 際 所 產 生 的 一 樣 理 想  ( 至 少 在 每 個 系 統 下, ANSI.SYS
均 應 被 安 裝 ).
   當 然,有 些 人 認 為 ANSI.SYS 執 行 得 太 慢;它 不 能 你 所 稱 的
視 窗 系 統  (windowing systems) 相 提 並 論.但 是 不 管 你 是 否 喜
歡,ANSI.SYS 是 程 式 撰 寫 員 的 一 個 工 具,ANSI.SYS 可 能 不 是 一
個 期 盼 中 最 偉 大 的 工 具,但 它 卻 是 一 個 最 基 本 的 使 用 工
具.
   大 致 來 說,使 用 ANSI.SYS 是 非 常 容 易 的.當 安 裝 好 之 後
(  從 CONFIG.SYS  檔 案 中 設 "DEVICE=ANSI.SYS"  ),它 會 去 搜 尋 一
組 特 殊 的 字 元,這 組 字 元 就 如 同 一 個 信 號,告 之 後 面 的 字
元 或 字 元 組 此 為 一 個 命 令,然 後 它 會 將 這 組 特 輸 字 元 加
以 取 代,加 入 一 些 適 當 的 命 令 字 元,將 其 放 在 螢 幕 適 當 的
位 置.在 ANSI.SYS 驅 動 程 式 中,僅 僅 包 括 了 一 個  MS-DOS  的 信
號,即 是 " ESC " (XIB) 及 "[" 的 組 合.當 這 組 字 元 被 依 序 送 到
標 準 輸 出 系 統 時,ANSI.SYS 就 會 知 道 有 些 事 情 將 會 發 生 .
-----------------------------------------------------------------------

ＡＮＳＩ　提供下列的服務 :

   ┌────────────────────┐
   ∣ ★ 游標移動 (上 ／下 ／前 ／後)        ∣
   ∣                                        ∣
   ∣ ★ 任意移動游標位置                    ∣
   ∣                                        ∣
   ∣ ★ 報告游標位置                        ∣
   ∣                                        ∣
   ∣ ★ 儲存及取出游標位置                  ∣
   ∣                                        ∣
   ∣ ★ 清除螢幕或一行文字                  ∣
   ∣                                        ∣
   ∣ ★ 顯示模組的控制                      ∣
   └────────────────────┘


　　　　　　　　　　　表一：　ＡＮＳＩ．ＳＹＳ 命令表
-----------------------------------------------------------------------
| 名稱 |    功 能        |  命 令  |      說      明                  |
-----------------------------------------------------------------------
| CUP  | 設定游標位置    | #1;#2H  |                                  |
-----------------------------------------------------------------------
| HVP  | 水平與垂直位置  | #1;#2f  |  #1 表示行 ; #2 表示列           |
-----------------------------------------------------------------------
| CUU  | 游標上移        | #A      |                                  |
-----------------------------------------------------------------------
| CUD  | 游標下移        | #B      |                                  |
-----------------------------------------------------------------------
| CUF  | 游標前移        | #C      |                                  |
-----------------------------------------------------------------------
| CUB  | 游標後移        | #D      |  # 多少個位置(前後左右)要移動    |
-----------------------------------------------------------------------
| DSR  | 狀態報告        | 6n      | 在鍵盤緩衝區中會有一個如下格式   |
|      |                 |         | 的字串ESC[##;##R以及一個CR符號   |
|      |                 |         | , 可以用getch() 來取得它         |
-----------------------------------------------------------------------
| SCP  | 儲存游標位置    | S       |                                  |
-----------------------------------------------------------------------
| RCP  | 恢復游標位置    | u       | (唯有游標先被儲存,才可以恢復游   |
|      |                 |         |  標.連續的儲存游標,後儲存的游    |
|      |                 |         |  標位置將蓋掉先儲存的游標位置)   |
-----------------------------------------------------------------------
| ED   | 清除螢幕        | 2J      | 清除螢幕;移動游標到左上角        |
-----------------------------------------------------------------------
| EL   | 清除一行文字    | K       | 將剩餘一行的文字變成空白;游標    |
|      |                 |         | 移動                             |
-----------------------------------------------------------------------
| SGR  | 設定繪圖解說    | #;,,,l#m| 可接受多個數字參數.設定現在螢幕  |
|      |                 |         | 顏色的屬性 (請參閱例題)          |
-----------------------------------------------------------------------
| SM   | 設定模組        | =#h     |                                  |
-----------------------------------------------------------------------
| RM   | 重新設定模組    | =#l     | #表示顯示模組(0~6).在SM中使用    |
|      |                 |         | 模組7 表示字的捲回是允許的.在    |
|      |                 |         | RM中使用模組7表示字的捲回是不    |
|      |                 |         | 允許的                           |
-----------------------------------------------------------------------

命 令 與 格 式 <-----------
▔▔▔▔▔▔▔
   這 些 命 令 是 憑 藉 著 "escape sequences" 發 送 出 來
的  , 其 格 式 如 " <ESC>[<參數><命令字元> ". 舉 個 例 子
 , 要 將 游 標 移 動 到 某 一 特 定 的 行 與 列 ,所 使 用 的 命 令 字
元 為 "H" , 因 此 ANSI.SYS 要 將 游 標 移 動 到 螢 幕 上 第 16 行 ,
第 10 列 位 置 的 命 令 是 "ESC[16;10H"  (後 面 可 以 放 置 你 所 要
印 出 的 字 串 或 字 元) . 若 是 沒 有 參 數  , 其 格 式 也 是 一 樣
的.例 如 要 清 除 現 在 游 標 所 佔 的 那 一 行  , 你 可 以 使 用 命
令 字 元  "K"  如 下 :    " ESC[K " .  ( 有 幫 助 的 暗 示:ANSI.SYS 對
大 寫 英 文 字 及 小 寫 英 文 字 有 不 同 的 反 應  , 因 此 命 令 字
元 "H"    與 "h" 是 完 全 不 同 的 !)
   表 一 所 顯 示 的 是 全 部 的 ANSI.SYS 命 令  ( 請 注 意  , " EXC[ "
組 合 字 元 要 放 在 每 一 個 命 令 的 前 面 ).
   所 有 ANSI.SYS 命 令  , 都 可 以 放 在  C 的 巨 集 指 令 內,而 這 些
巨 集 指 令 可 以 放 在 一 個 include  檔 案 內.例 1. (ANSI.H) 顯 示 這
些 巨 集 指 令 如 何 被 完 成.它 們 是 從 Augie Hansen 的 Proficient  C
這 本 書 中 所 摘 錄 下 來 的.

功 能 程 式 應 用 <----------
▔▔▔▔▔▔▔▔▔
   以 下 提 供 兩 個 有 用 的 功 能 程 式 在 "例 2." (ANSISTUF.C) 中 ,
get_cur_pos()  程 式 會 將 現 在 游 標 的 位 置 傳 遞 給 呼 叫 程 式
以 及 如 何 去 使 用 ANSI_DSR 的 巨 集 指 令; ansi_installed() 程 式
會 測 試 ANSI.SYS 是 否 已 經 安 裝 好 了.
   你 可 能 已 經 注 意 到 即 定 (default) 的 ANSI.SYS 顏 色 號 碼 和
IBM的 標 準 顏 色 號 碼 有 所 不 同  , 不 用 擔 心  , 當 你 使 用 ANSI.SYS
命 令 時 , ANSI.H 中 的 顏 色 號 碼 將 會 產 生 你 所 期 望 的 顏 色 .
你 可 以 在 ANSI.SGR 程 式 中 選 擇 顯 示"字"的 顏 色 屬 性.

例一 :
▔▔▔
/* ANSI.H */
/*
Description :  Macro definitions for terminal control using ANSI.SYS.
        Includes both cursor positioning and color control.

Author :       Augie Hansen (From "Proficient C", Microsoft Press)
Application :  IBM PC or compitable with turbo C
Published in : TUG Line - Turbo User Group. Box 1510, Poulsbo, WA 98370
*/
/* cursor position */
#define ANSI_CUP(r, c) printf("\x1b[%d;%dH", r, c)
#define ANSI_HVP(r, c) printf("\x1B[%d;%df", r, c)

/* cursor  up, down, forward, back */
#define ANSI_CUU(n)    printf("\x1B[%dA", n)
#define ANSI_CUD(n)    printf("\x1B[%dB", n)
#define ANSI_CUF(n)    printf("\x1B[%dC", n)
#define ANSI_CUB(n)    printf("\x1B[%dD", n)

/* device status report (puts pos'n data in stdin buffer) */
#define ANSI_DSR       printf("\x1B[6n")

/* save and restore cursor position */
#define ANSI_SCP       printf("\x1B[6s")
#define ANSI_RSP       printf("\x1B[6u")

/* erase display and line */
#define ANSI_ED        printf("\x1B[2J")
#define ANSI_EL        printf("\x1B[K")

/* set graphic rendition */
#define ANSI_SGR(a)    printf("\x1B[%dm",a)

/* set and reset modes */
#define ANSI_SM(m)     printf("\x1B[=%dh",m)
#define ANSI_RM(m)     printf("\x1B[=%dl",m)

/* ANSI color codes */

/* special settings */
#define  NORMAL    0
#define  BRIGHT    1
#define  BLINK     5
#define  REVERSE   7
#define  INVISIBLE 8

/* basic colors */
#define  BLACK     0
#define  RED       1
#define  GREEN     2
#define  BROWN     3
#define  BLUE      4
#define  MAGENTA   5
#define  CYAN      6
#define  WHITE     7

/* shift values */
#define  FOREGROUND  30
#define  BACKGROUND  40

/* video modes for SM and RM */
#define  MONO40    0
#define  COLOR40   1
#define  MONO80    2
#define  COLOR80   3
#define  MRESCOLOR 4
#define  MRESMONO  5
#define  MRESMONO  6
#define  WORDWRAP  7
----------------------------------------------------------------------

例二 :
▔▔▔
/* ANSISTUF.C */
/*
Description :  Routines to return the cursor position as an integer
       to the keyboard buffer, and to determine if the ANSI.SYS
       driver has been installed. Uses the macros defined in
       ANSI.H.

Author :       Tim Gentry
Date :         2/2/88
Application :  IBM PC or compatible with Turbo C
Published in : TUG Lines - Turbo User Group. Box 1510, Poulsbo, WA 98370
*/

void get_cur_pos (row, col)
int *row. *col;
{
/* ANSI_DSR puts the current cursor position into */
/* the keyboard buffer (stoin) in the format      */
/*     <esc>[##;##R<cr>                           */
/* we therefore need to screen out the characters */
/* <esc>, [, ;, R, and <cr>.                      */
     ANSI_DSR;          /* request cursor info    */

     getch();     /* trash the <esc>              */
     getch();     /* trash the [                  */

     *row = 10 * (getch() - '0');
     *row = *row + (getch() - '0');

      getch();    /* trash the ;                  */

      *col = 10 * (getch() - '0');
      *col = *col + (getch() - '0');

      getch();     /* trash the R                 */
      getch();     /* trash the <cr>              */

      return;
}

int ansi_installed()
{
#define TROW  10
#define TCOL  79
     /* determines if ANSI.SYS is installed by calling   */
     /* ANSI_CUP to position cursor at row 10, col 79,   */
     /* then using the bios video services (hex 10)to get  */
     /* the current video position.  If it's equal to 10,  */
     /* 79 then ANSI.SYS is installed, else it's not.   */
     /* returns 1 if installed, 0 if not.   */

     union REGS inregs, outregs;

     ANSI_CUP(TROW, TCOL);

     inregs.h.ah = 15;        /* get video state   */
     int86(0x10, &inregs, &outregs);   /* do the interrupt  */
     inregs.h.ah = 3;       /* 3 = get cur pos   */
     inregs.h.ah = outregs.h.bh        /* video page number */
     int86(0x10, &inregs, &outregs);   /* do the interrupt  */

     if  (outregs.h.dl!=TCOL - 1
  || outregs.h.dh  !=TROW - 1) /* do the interrupt  */
  return (0);
     else
  return (1);
}

 * Origin: ★ 交通大學資訊科學系 BBS ★ 
 <bbs.cis.nctu.edu.tw: 140.113.23.3>
